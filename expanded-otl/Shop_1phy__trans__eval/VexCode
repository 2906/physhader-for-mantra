;_name	phy_trans_eval
; ModuleID = 'phy_trans_eval'

@refl = external global <3 x double>
@eval = external global <3 x double>
@pdf = external global double
@0 = private constant [11 x i8] c"allrefract\00"
@1 = private constant [5 x i8] c"refl\00"
@2 = private constant [5 x i8] c"eval\00"
@3 = private constant [4 x i8] c"pdf\00"

define private double @"ggg@FFF"(double* %dotNH, double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %dotNH3 = load double* %dotNH
  %output = fmul double %dotNH3, %dotNH3
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output6 = fadd double %sigma1, %output5
  %output7 = fsub double %output6, 1.000000e+00
  %output8 = call double @"div@FF"(double %sigma1, double %output7)
  %output11 = fmul double %output8, %output8
  ret double %output11
}

declare double @"div@FF"(double, double) nounwind readnone

define private double @"ggg_albedo@FF"(double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %return = call double @"sqrt@FF"(double %sigma1)
  %output = fadd double %return, 1.000000e+00
  %output4 = fmul double 2.000000e+00, %sigma1
  %output6 = fadd double %output4, %return
  %output9 = fmul double %output, %output
  %output10 = call double @"div@FF"(double %output6, double %output9)
  ret double %output10
}

declare double @"sqrt@FF"(double) nounwind readnone

define private double @"gaf@FFF"(double* %nu, double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %nu2 = load double* %nu
  %output = fmul double %nu2, %nu2
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output5 = fsub double %output4, 1.000000e+00
  %output6 = fmul double %sigma1, %output5
  %output7 = fadd double 1.000000e+00, %output6
  %return = call double @"sqrt@FF"(double %output7)
  %output8 = fadd double 1.000000e+00, %return
  %output9 = call double @"div@FF"(double 2.000000e+00, double %output8)
  ret double %output9
}

define private double @"ct_ggg@FFFF"(double* %sigma, double* %dotNH, double* %dotNL) nounwind alwaysinline {
entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %dotNH1 = load double* %dotNH
  store double %dotNH1, double* %3
  %sigma2 = load double* %sigma
  store double %sigma2, double* %0
  %ggg = call double @"ggg@FFF"(double* %3, double* %0)
  %dotNL3 = load double* %dotNL
  store double %dotNL3, double* %1
  %sigma4 = load double* %sigma
  store double %sigma4, double* %2
  %gaf = call double @"gaf@FFF"(double* %1, double* %2)
  %output = fmul double %ggg, %gaf
  ret double %output
}

define void @phy_trans_eval(<3 x double> %u, <3 x double> %v, i32 %bounces, i32 %reverse, <3 x double> %refl, <3 x double> %eval, double %pdf, <3 x double> %n, double %sigma, double %eta) nounwind {
entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %return = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([11 x i8]* @0, i32 0, i32 0))
  %return2 = and i32 %bounces, %return
  %4 = icmp ne i32 %return2, 0
  br i1 %4, label %true, label %end

true:                                             ; preds = %entry
  %return4 = call <3 x double> @"neg@VV"(<3 x double> %u)
  %return6 = fcmp one double %eta, 1.000000e+00
  br i1 %return6, label %true8, label %end9

end:                                              ; preds = %end9, %entry
  %"<refl>.0" = phi <3 x double> [ %cast34, %end9 ], [ %refl, %entry ]
  %"<eval>.0" = phi <3 x double> [ %cast, %end9 ], [ %eval, %entry ]
  %"<pdf>.0" = phi double [ %ct_ggg, %end9 ], [ %pdf, %entry ]
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8]* @1, i32 0, i32 0), <3 x double> %"<refl>.0") nounwind readonly
  %gvalue36 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8]* @2, i32 0, i32 0), <3 x double> %"<eval>.0") nounwind readonly
  %gvalue38 = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8]* @3, i32 0, i32 0), double %"<pdf>.0") nounwind readonly
  store <3 x double> %gvalue, <3 x double>* @refl
  store <3 x double> %gvalue36, <3 x double>* @eval
  store double %gvalue38, double* @pdf
  ret void

true8:                                            ; preds = %true
  %return14 = call <3 x double> @"refract@VVVF"(<3 x double> %return4, <3 x double> %n, double %eta)
  br label %end9

end9:                                             ; preds = %true8, %true
  %tdir.0 = phi <3 x double> [ %return14, %true8 ], [ %return4, %true ]
  %output = call <3 x double> @"add@VV"(<3 x double> %tdir.0, <3 x double> %v)
  %return17 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return21 = call <3 x double> @"frontface@VVVV"(<3 x double> %n, <3 x double> %u, <3 x double> %n)
  %return24 = call double @"dot@FVV"(<3 x double> %tdir.0, <3 x double> %return17)
  %return27 = call double @"dot@FVV"(<3 x double> %return21, <3 x double> %v)
  store double %sigma, double* %0
  store double %return24, double* %1
  store double %return27, double* %2
  %ct_ggg = call double @"ct_ggg@FFFF"(double* %0, double* %1, double* %2)
  %cast = call <3 x double> @"set@VF"(double %ct_ggg)
  store double %sigma, double* %3
  %ggg_albedo = call double @"ggg_albedo@FF"(double* %3)
  %output33 = fsub double 1.000000e+00, %ggg_albedo
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end
}

declare i32 @"bouncemask@IS"(i8*) nounwind readnone

declare <3 x double> @"neg@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"refract@VVVF"(<3 x double>, <3 x double>, double) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"normalize@VV"(<3 x double>) nounwind

declare <3 x double> @"frontface@VVVV"(<3 x double>, <3 x double>, <3 x double>) nounwind

declare double @"dot@FVV"(<3 x double>, <3 x double>) nounwind

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
entry:
  call void @phy_trans_eval(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i32 0, i32 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, double 1.000000e-01, double 1.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"14.0.201.13"}

;_code_end
