;_name	phy_aniso_trans_eval
; ModuleID = 'phy_aniso_trans_eval'

@refl = external global <3 x double>
@eval = external global <3 x double>
@pdf = external global double
@0 = private constant [11 x i8] c"allrefract\00"

define private double @"ggg@FFF"(double* %dotNH, double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %dotNH3 = load double* %dotNH
  %output = fmul double %dotNH3, %dotNH3
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output6 = fadd double %sigma1, %output5
  %output7 = fsub double %output6, 1.000000e+00
  %output8 = call double @"div@FF"(double %sigma1, double %output7)
  %output11 = fmul double %output8, %output8
  ret double %output11
}

declare double @"div@FF"(double, double) nounwind readnone

define private double @"ggg_albedo@FF"(double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %return = call double @"sqrt@FF"(double %sigma1)
  %output = fadd double %return, 1.000000e+00
  %output4 = fmul double 2.000000e+00, %sigma1
  %output6 = fadd double %output4, %return
  %output9 = fmul double %output, %output
  %output10 = call double @"div@FF"(double %output6, double %output9)
  ret double %output10
}

declare double @"sqrt@FF"(double) nounwind readnone

define private double @"gaf@FFF"(double* %nu, double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %nu2 = load double* %nu
  %output = fmul double %nu2, %nu2
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output5 = fsub double %output4, 1.000000e+00
  %output6 = fmul double %sigma1, %output5
  %output7 = fadd double 1.000000e+00, %output6
  %return = call double @"sqrt@FF"(double %output7)
  %output8 = fadd double 1.000000e+00, %return
  %output9 = call double @"div@FF"(double 2.000000e+00, double %output8)
  ret double %output9
}

define private double @"ct_ggg@FFFF"(double* %sigma, double* %dotNH, double* %dotNL) nounwind alwaysinline {
entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %dotNH1 = load double* %dotNH
  store double %dotNH1, double* %3
  %sigma2 = load double* %sigma
  store double %sigma2, double* %0
  %ggg = call double @"ggg@FFF"(double* %3, double* %0)
  %dotNL3 = load double* %dotNL
  store double %dotNL3, double* %1
  %sigma4 = load double* %sigma
  store double %sigma4, double* %2
  %gaf = call double @"gaf@FFF"(double* %1, double* %2)
  %output = fmul double %ggg, %gaf
  ret double %output
}

define private void @"anisorough@FFFF"(double* %sigma, double* %bias, double* %sigmau, double* %sigmav) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %bias2 = load double* %bias
  %output = fadd double 1.000000e+00, %bias2
  %output3 = fmul double %sigma1, %output
  store double %output3, double* %sigmau
  %sigma4 = load double* %sigma
  %bias5 = load double* %bias
  %output6 = fsub double 1.000000e+00, %bias5
  %output7 = fmul double %sigma4, %output6
  store double %output7, double* %sigmav
  ret void
}

define private double @"anisorough@FVVVFF"(<3 x double>* %ph, <3 x double>* %tu, <3 x double>* %tv, double* %sigmau, double* %sigmav) nounwind alwaysinline {
entry:
  %ph1 = load <3 x double>* %ph
  %tu2 = load <3 x double>* %tu
  %return = call double @"dot@FVV"(<3 x double> %ph1, <3 x double> %tu2)
  %ph3 = load <3 x double>* %ph
  %tv4 = load <3 x double>* %tv
  %return5 = call double @"dot@FVV"(<3 x double> %ph3, <3 x double> %tv4)
  %output = fmul double %return, %return
  %sigmau8 = load double* %sigmau
  %output9 = call double @"div@FF"(double %output, double %sigmau8)
  %output12 = fmul double %return5, %return5
  %sigmav13 = load double* %sigmav
  %output14 = call double @"div@FF"(double %output12, double %sigmav13)
  %output15 = fadd double %output9, %output14
  %output16 = call double @"div@FF"(double 1.000000e+00, double %output15)
  ret double %output16
}

declare double @"dot@FVV"(<3 x double>, <3 x double>) nounwind

define private double @"anisorough@FVVVVFFF"(<3 x double>* %h, <3 x double>* %n, <3 x double>* %tu, <3 x double>* %tv, double* %dotNH, double* %sigmau, double* %sigmav) nounwind alwaysinline {
entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca double
  %4 = alloca double
  %h1 = load <3 x double>* %h
  %n2 = load <3 x double>* %n
  %dotNH3 = load double* %dotNH
  %cast = call <3 x double> @"set@VF"(double %dotNH3)
  %output = call <3 x double> @"mul@VV"(<3 x double> %n2, <3 x double> %cast)
  %output4 = call <3 x double> @"sub@VV"(<3 x double> %h1, <3 x double> %output)
  %return = call <3 x double> @"normalize@VV"(<3 x double> %output4)
  store <3 x double> %return, <3 x double>* %0
  %tu6 = load <3 x double>* %tu
  store <3 x double> %tu6, <3 x double>* %1
  %tv7 = load <3 x double>* %tv
  store <3 x double> %tv7, <3 x double>* %2
  %sigmau8 = load double* %sigmau
  store double %sigmau8, double* %3
  %sigmav9 = load double* %sigmav
  store double %sigmav9, double* %4
  %anisorough = call double @"anisorough@FVVVFF"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, double* %3, double* %4)
  ret double %anisorough
}

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"normalize@VV"(<3 x double>) nounwind

define void @phy_aniso_trans_eval(<3 x double> %u, <3 x double> %v, i32 %bounces, <3 x double> %refl, <3 x double> %eval, double %pdf, <3 x double> %n, double %sigmau, double %sigmav, <3 x double> %tu, <3 x double> %tv, double %eta) nounwind {
entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %10 = alloca double
  %return = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([11 x i8]* @0, i32 0, i32 0))
  %return2 = and i32 %bounces, %return
  %11 = icmp ne i32 %return2, 0
  br i1 %11, label %true, label %end

true:                                             ; preds = %entry
  %return4 = call <3 x double> @"neg@VV"(<3 x double> %u)
  %return6 = fcmp one double %eta, 1.000000e+00
  %return7 = zext i1 %return6 to i32
  br i1 %return6, label %true8, label %end9

end:                                              ; preds = %end9, %entry
  %refl42.0 = phi <3 x double> [ %cast41, %end9 ], [ %refl, %entry ]
  %eval43.0 = phi <3 x double> [ %cast, %end9 ], [ %eval, %entry ]
  %pdf44.0 = phi double [ %ct_ggg, %end9 ], [ %pdf, %entry ]
  store <3 x double> %refl42.0, <3 x double>* @refl
  store <3 x double> %eval43.0, <3 x double>* @eval
  store double %pdf44.0, double* @pdf
  ret void

true8:                                            ; preds = %true
  %return14 = call <3 x double> @"refract@VVVF"(<3 x double> %return4, <3 x double> %n, double %eta)
  br label %end9

end9:                                             ; preds = %true8, %true
  %tdir.0 = phi <3 x double> [ %return14, %true8 ], [ %return4, %true ]
  %output = call <3 x double> @"add@VV"(<3 x double> %tdir.0, <3 x double> %v)
  %return17 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return21 = call <3 x double> @"frontface@VVVV"(<3 x double> %n, <3 x double> %u, <3 x double> %n)
  %return24 = call double @"dot@FVV"(<3 x double> %tdir.0, <3 x double> %return17)
  %return27 = call double @"dot@FVV"(<3 x double> %return21, <3 x double> %v)
  store <3 x double> %return17, <3 x double>* %0
  store <3 x double> %n, <3 x double>* %1
  store <3 x double> %tu, <3 x double>* %2
  store <3 x double> %tv, <3 x double>* %3
  store double %return24, double* %4
  store double %sigmau, double* %5
  store double %sigmav, double* %6
  %anisorough = call double @"anisorough@FVVVVFFF"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, <3 x double>* %3, double* %4, double* %5, double* %6)
  store double %anisorough, double* %7
  store double %return24, double* %8
  store double %return27, double* %9
  %ct_ggg = call double @"ct_ggg@FFFF"(double* %7, double* %8, double* %9)
  %cast = call <3 x double> @"set@VF"(double %ct_ggg)
  store double %anisorough, double* %10
  %ggg_albedo = call double @"ggg_albedo@FF"(double* %10)
  %output40 = fsub double 1.000000e+00, %ggg_albedo
  %cast41 = call <3 x double> @"set@VF"(double %output40)
  br label %end
}

declare i32 @"bouncemask@IS"(i8*) nounwind readnone

declare <3 x double> @"neg@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"refract@VVVF"(<3 x double>, <3 x double>, double) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"frontface@VVVV"(<3 x double>, <3 x double>, <3 x double>) nounwind

define void @__shader_default_arguments() {
entry:
  call void @phy_aniso_trans_eval(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i32 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, double 1.000000e-01, double 1.000000e-01, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, double 1.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"13.0.621"}

;_code_end
