;_name	phy_aniso_sample
; ModuleID = 'phy_aniso_sample'

@refl = external global <3 x double>
@v = external global <3 x double>
@bouncetype = external global i32
@pdf = external global double
@0 = private constant [4 x i8] c"all\00"
@1 = private constant [11 x i8] c"alldiffuse\00"
@2 = private constant [10 x i8] c"allvolume\00"
@3 = private constant [11 x i8] c"allrefract\00"

define private double @"ggg_albedo@FF"(double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %return = call double @"sqrt@FF"(double %sigma1)
  %output = fadd double %return, 1.000000e+00
  %output4 = fmul double 2.000000e+00, %sigma1
  %output6 = fadd double %output4, %return
  %output9 = fmul double %output, %output
  %output10 = call double @"div@FF"(double %output6, double %output9)
  ret double %output10
}

declare double @"sqrt@FF"(double) nounwind readnone

declare double @"div@FF"(double, double) nounwind readnone

define private double @"gaf@FFF"(double* %nu, double* %sigma) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %nu2 = load double* %nu
  %output = fmul double %nu2, %nu2
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output5 = fsub double %output4, 1.000000e+00
  %output6 = fmul double %sigma1, %output5
  %output7 = fadd double 1.000000e+00, %output6
  %return = call double @"sqrt@FF"(double %output7)
  %output8 = fadd double 1.000000e+00, %return
  %output9 = call double @"div@FF"(double 2.000000e+00, double %output8)
  ret double %output9
}

define private double @"pdf_ggg@FVVVVF"(<3 x double>* %i, <3 x double>* %o, <3 x double>* %n, <3 x double>* %h, double* %sigma) nounwind alwaysinline {
entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %i1 = load <3 x double>* %i
  %h2 = load <3 x double>* %h
  %return = call double @"dot@FVV"(<3 x double> %i1, <3 x double> %h2)
  %return3 = call double @"abs@FF"(double %return)
  %i4 = load <3 x double>* %i
  %n5 = load <3 x double>* %n
  %return6 = call double @"dot@FVV"(<3 x double> %i4, <3 x double> %n5)
  %return7 = call double @"abs@FF"(double %return6)
  store double %return7, double* %0
  %sigma8 = load double* %sigma
  store double %sigma8, double* %1
  %gaf = call double @"gaf@FFF"(double* %0, double* %1)
  %output = fmul double %return3, %gaf
  %o9 = load <3 x double>* %o
  %n10 = load <3 x double>* %n
  %return11 = call double @"dot@FVV"(<3 x double> %o9, <3 x double> %n10)
  %return12 = call double @"abs@FF"(double %return11)
  store double %return12, double* %2
  %sigma13 = load double* %sigma
  store double %sigma13, double* %3
  %gaf14 = call double @"gaf@FFF"(double* %2, double* %3)
  %output15 = fmul double %output, %gaf14
  %i16 = load <3 x double>* %i
  %n17 = load <3 x double>* %n
  %return18 = call double @"dot@FVV"(<3 x double> %i16, <3 x double> %n17)
  %return19 = call double @"abs@FF"(double %return18)
  %h20 = load <3 x double>* %h
  %n21 = load <3 x double>* %n
  %return22 = call double @"dot@FVV"(<3 x double> %h20, <3 x double> %n21)
  %return23 = call double @"abs@FF"(double %return22)
  %output24 = fadd double %return19, %return23
  %output25 = call double @"div@FF"(double %output15, double %output24)
  ret double %output25
}

declare double @"dot@FVV"(<3 x double>, <3 x double>) nounwind

declare double @"abs@FF"(double) nounwind

define private <3 x double> @"microfacet@VFFF"(double* %sigma, double* %sx, double* %sy) nounwind alwaysinline {
entry:
  %sigma1 = load double* %sigma
  %sx2 = load double* %sx
  %return = call double @"sqrt@FF"(double %sx2)
  %output = fmul double %sigma1, %return
  %output4 = fsub double 1.000000e+00, %sx2
  %return5 = call double @"sqrt@FF"(double %output4)
  %output6 = call double @"div@FF"(double %output, double %return5)
  %sy7 = load double* %sy
  %output8 = fmul double 0x401921FB4D12D84A, %sy7
  %return11 = call double @"cos@FF"(double %output8)
  %output12 = fmul double %output6, %return11
  %return15 = call double @"sin@FF"(double %output8)
  %output16 = fmul double %output6, %return15
  %return19 = call <3 x double> @"set@VFFF"(double %output12, double %output16, double 1.000000e+00)
  %return20 = call <3 x double> @"normalize@VV"(<3 x double> %return19)
  ret <3 x double> %return20
}

declare double @"cos@FF"(double) nounwind readnone

declare double @"sin@FF"(double) nounwind readnone

declare <3 x double> @"set@VFFF"(double, double, double) nounwind readnone

declare <3 x double> @"normalize@VV"(<3 x double>) nounwind

define private <3 x double> @"microfacet@VFFFF"(double* %sigmau, double* %sigmav, double* %sx, double* %sy) nounwind alwaysinline {
entry:
  %sx1 = load double* %sx
  %return = call double @"sqrt@FF"(double %sx1)
  %output = fsub double 1.000000e+00, %sx1
  %return3 = call double @"sqrt@FF"(double %output)
  %output4 = call double @"div@FF"(double %return, double %return3)
  %sy5 = load double* %sy
  %output6 = fmul double 0x401921FB4D12D84A, %sy5
  %sigmau7 = load double* %sigmau
  %output9 = fmul double %sigmau7, %output4
  %return11 = call double @"cos@FF"(double %output6)
  %output12 = fmul double %output9, %return11
  %sigmav13 = load double* %sigmav
  %output15 = fmul double %sigmav13, %output4
  %return17 = call double @"sin@FF"(double %output6)
  %output18 = fmul double %output15, %return17
  %return21 = call <3 x double> @"set@VFFF"(double %output12, double %output18, double 1.000000e+00)
  %return22 = call <3 x double> @"normalize@VV"(<3 x double> %return21)
  ret <3 x double> %return22
}

define void @phy_aniso_sample(<3 x double> %u, double %sx, double %sy, i32 %bounces, <3 x double> %refl, <3 x double> %v, i32 %bouncetype, double %pdf, <3 x double> %n, double %sigmau, double %sigmav, <3 x double> %tu, <3 x double> %tv) nounwind {
entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca <3 x double>
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca <3 x double>
  %8 = alloca double
  %9 = alloca double
  %return = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([4 x i8]* @0, i32 0, i32 0))
  %return2 = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([11 x i8]* @1, i32 0, i32 0))
  %return3 = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([10 x i8]* @2, i32 0, i32 0))
  %return4 = or i32 %return2, %return3
  %return5 = call i32 @"bnot@II"(i32 %return4)
  %return6 = and i32 %return, %return5
  %return7 = call i32 @"bouncemask@IS"(i8* getelementptr inbounds ([11 x i8]* @3, i32 0, i32 0))
  %return8 = call i32 @"bnot@II"(i32 %return7)
  %return9 = and i32 %return6, %return8
  %return10 = and i32 %bounces, %return9
  %return13 = call double @"dot@FVV"(<3 x double> %u, <3 x double> %n)
  %return14 = fcmp ogt double %return13, 0.000000e+00
  %return15 = zext i1 %return14 to i32
  %return16 = call i32 @"and@III"(i32 %return10, i32 %return15)
  %10 = icmp ne i32 %return16, 0
  br i1 %10, label %true, label %end

true:                                             ; preds = %entry
  store double %sigmau, double* %0
  store double %sigmav, double* %1
  store double %sx, double* %2
  store double %sy, double* %3
  %microfacet = call <3 x double> @"microfacet@VFFFF"(double* %0, double* %1, double* %2, double* %3)
  %return25 = call <9 x double> @"set@3VVV"(<3 x double> %tu, <3 x double> %tv, <3 x double> %n)
  %output = call <3 x double> @"mul@V3"(<3 x double> %microfacet, <9 x double> %return25)
  %return27 = call <3 x double> @"neg@VV"(<3 x double> %u)
  %return29 = call <3 x double> @"reflect@VVV"(<3 x double> %return27, <3 x double> %output)
  %return32 = call double @"avg@FFF"(double %sigmau, double %sigmav)
  store <3 x double> %return29, <3 x double>* %4
  store <3 x double> %u, <3 x double>* %5
  store <3 x double> %n, <3 x double>* %6
  store <3 x double> %output, <3 x double>* %7
  store double %return32, double* %8
  %pdf_ggg = call double @"pdf_ggg@FVVVVF"(<3 x double>* %4, <3 x double>* %5, <3 x double>* %6, <3 x double>* %7, double* %8)
  store double %return32, double* %9
  %ggg_albedo = call double @"ggg_albedo@FF"(double* %9)
  %output39 = fsub double 1.000000e+00, %ggg_albedo
  %cast = call <3 x double> @"set@VF"(double %output39)
  br label %end

end:                                              ; preds = %true, %entry
  %refl49.0 = phi <3 x double> [ %cast, %true ], [ %refl, %entry ]
  %v50.0 = phi <3 x double> [ %return29, %true ], [ %v, %entry ]
  %bouncetype51.0 = phi i32 [ %return9, %true ], [ %bouncetype, %entry ]
  %pdf52.0 = phi double [ %pdf_ggg, %true ], [ %pdf, %entry ]
  store <3 x double> %refl49.0, <3 x double>* @refl
  store <3 x double> %v50.0, <3 x double>* @v
  store i32 %bouncetype51.0, i32* @bouncetype
  store double %pdf52.0, double* @pdf
  ret void
}

declare i32 @"bouncemask@IS"(i8*) nounwind readnone

declare i32 @"bnot@II"(i32) nounwind readnone

declare i32 @"and@III"(i32, i32) nounwind readnone

declare <9 x double> @"set@3VVV"(<3 x double>, <3 x double>, <3 x double>) nounwind

declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) nounwind

declare <3 x double> @"neg@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"reflect@VVV"(<3 x double>, <3 x double>) nounwind

declare double @"avg@FFF"(double, double) nounwind readnone

declare <3 x double> @"set@VF"(double) nounwind readnone

define void @__shader_default_arguments() {
entry:
  call void @phy_aniso_sample(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i32 0, double 0.000000e+00, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, double 1.000000e-01, double 1.000000e-01, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  ret void
}

!context = !{!0}
!version = !{!1}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"13.0.621"}

;_code_end
