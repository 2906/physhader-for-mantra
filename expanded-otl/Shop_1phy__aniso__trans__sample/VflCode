//      Anisotropic refraction sampling shader.
//      This is part of phyShader for Mantra.
//
//
// Copyright (c) 2013-2015 Roman Saldygashev <sldg.roman@gmail.com>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


#include <pbr.h>
#include <phy/microfacet.h>


cvex
phy_aniso_trans_sample(vector u = 0;
                       float sx = 0;
                       float sy = 0;
                       int bounces = 0;
                       export vector refl = 0;
                       export vector v = 0;
                       export int bouncetype = 0;
                       export float pdf = 0;
                       vector n = {0.0, 1.0, 0.0};
                       float sigmau = 0.1;
                       float sigmav = 0.1;
                       vector tu = {1.0, 0.0, 0.0};
                       vector tv = {0.0, 0.0, 1.0};
                       float eta = 1.0)
{
    if (bounces & PBR_REFRACT_MASK)
    {
        MAKE_ANISO_MICROFACET;
        REFRACTION_SAMPLE;
        ANISO_SIGMA_PDF;
        SAMPLE_GGG;
        bouncetype = PBR_REFRACT_MASK;
    }
}
